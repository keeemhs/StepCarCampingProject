<!DOCTYPE html>
<html lang="kr">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>STEP</title>
        <script src="https://kit.fontawesome.com/8786e78429.js" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script
            type="text/javascript"
            src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=ijdya8hea0"
        ></script>
        <link rel="stylesheet" href="../review.css" />
    </head>
    <body>
        <%-include('header.ejs')%>
        <section>
            <img src="../banner.jpg" alt="배너이미지" style="width: 100%" />
        </section>
        <!-- user.name -->
        <div id="body_container">
            <br />
            <h2 id="main-title"><%= userInfo.username %> 님의 후기</h2>
            <!-- 사진넘기기-->
            <br />
            <div class="img_container">
                <div id="pictures">
                    <i class="fa-solid fa-arrow-left" onclick="left()"></i>
                    <img
                        id="img-box"
                        class="img--box"
                        src="<%= imgurl.urls[0] %>"
                        alt="../static/ever2.jpeg"
                        onerror="this.src= '../static/ever2.jpeg'"
                    />
                    <i class="fa-solid fa-arrow-right" onclick="right()"></i>
                </div>
                <br />
                <!-- 지도 -->
                <div class="map-container">
                    <div class="map" id="map"></div>
                </div>
            </div>
            <br />
            <!-- 본문 -->
            <h3>
                <div><%= data.mainText %></div>
            </h3>
            <div class="new-button-container">
                <button class="new-button" onclick="changeReview()">수정</button>
                <button class="new-button" onclick="delReview()">삭제</button>
            </div>
            <!-- 댓글-->
            <hr />
            <div class="commentView">
                <div>
                    <!-- 여기에 대댓글을 추가할 수 있는 method가 필요하다. -->
                    <% for(let i=0; i< comments.length; i++){ %>
                    <div>
                        <div>
                            <div class="dropdown-container">
                                <%= comments[i].main.nickName %> : <%= comments[i].main.commentText %> <%
                                if(comments[i].main.commentText!="삭제되었습니다."){ %>
                                <button class="dropdown-btn" onclick="toggleDropdown(event)">···</button>
                                <% } %>

                                <div class="dropdown-content">
                                    <button type="button" class="del-button" onclick="showSubComment('<%= i %>')">
                                        답글
                                    </button>
                                    <button
                                        type="button"
                                        class="del-button"
                                        onclick="deleteComment('<%=comments[i].main.commentid %>',-1,'<%= data.galleryid %>')"
                                    >
                                        댓글 삭제
                                    </button>
                                </div>
                            </div>
                        </div>
                        <form
                            style="display: none; margin-left: 30px"
                            class="hideComment<%= i %>"
                            name="maincomment<%= i %>"
                        >
                            <span style="font-size: 20px">↳</span>
                            <span>답글</span>
                            <input name="mainCommentInput" type="text" placeholder="댓글" />
                            <button
                                type="button"
                                class="del-button"
                                onclick="addSubComment('<%=i %>','<%= data.galleryid %>','<%= comments[i].main.commentGroup %>','<%= comments[i].main.deepComment %>')"
                            >
                                댓글입력
                            </button>
                        </form>
                    </div>
                    <ul class="comment-comment">
                        <!-- 여길 ejs에서 불러온 데이터만큼 반복한다. -->
                        <% for(let j=0; j < comments[i].sub.length; j++){ %>
                        <li class="comment-comment-li">
                            <div class="dropdown-container">
                                <span style="font-size: 20px">↳</span><%= comments[i].sub[j].nickName %> : <%=
                                comments[i].sub[j].commentText %>
                                <button class="dropdown-btn" onclick="toggleDropdown(event)">···</button>
                                <div class="dropdown-content">
                                    <button
                                        type="button"
                                        class="del-button"
                                        onclick="deleteComment('<%=comments[i].main.commentid %>','<%= comments[i].sub[j].commentid %>','<%= data.galleryid %>')"
                                    >
                                        댓글 삭제
                                    </button>
                                </div>
                            </div>
                        </li>
                        <% } %>
                    </ul>
                    <% } %>
                </div>
            </div>
            <div class="inputComment">
                <form name="maincomment" class="mainComment">
                    <span>댓글</span>
                    <input name="mainCommentInput" type="text" placeholder="댓글" />
                    <button type="button" onclick="addMainComment()">댓글입력</button>
                </form>
            </div>
        </div>

        <%-include('footer.ejs')%>

        <script>
            //지도 로직
            var locations = {
                1: [127.175308, 37.542608],
                2: [128.408642, 37.813589],
                3: [127.345474, 36.736896],
                4: [128.486217, 35.82567],
                5: [127.215317, 35.283847],
                6: [126.562305, 33.375393],
            };

            var datas = JSON.parse('<%- JSON.stringify(data) %>');
            console.log(datas.region);
            var results = datas.userlocations;
            console.log(results);
            //지도 초기 기준점 위치 설정
            const mapOptions = {
                center: new naver.maps.LatLng(locations[datas.region]),
                zoom: 8,
            };

            var map = new naver.maps.Map('map', mapOptions);
            //해당 지역의 차박 스팟 마커찍기 + 스팟리스트 출력
            var marker = [];
            var polyline = new naver.maps.Polyline({ map, path: [] });
            for (let i = 0; i < results.length; i++) {
                marker[i] = new naver.maps.Marker({
                    map: map,
                    position: new naver.maps.LatLng(results[i].lat, results[i].lon),
                });
                polyline.path.push(new naver.maps.LatLng(results[i].lat, results[i].lon));
            }

            // imgurl를 stringfy해준뒤에, 다시 parse해서 jsonobject를 만든다.
            // 나중에는 그냥 서버단에서 하는게 나을것같다.
            var imgurl = JSON.parse('<%- JSON.stringify(imgurl) %>').urls;

            console.log(typeof imgurl);
            console.log(imgurl);
            var currentImg = 0;

            var imgLength = imgurl.length;
            console.log(imgLength);
            function left() {
                if (currentImg == 0) {
                    currentImg = imgLength - 1;
                } else {
                    currentImg--;
                }
                console.log(imgurl[currentImg]);
                document.querySelector('#img-box').src = imgurl[currentImg];
            }
            function right() {
                if (currentImg == imgLength - 1) {
                    currentImg = 0;
                } else {
                    currentImg++;
                }
                console.log(imgurl, currentImg);
                document.querySelector('#img-box').src = imgurl[currentImg];
            }

            async function delReview() {
                const urlSearch = new URLSearchParams(location.search);
                const gid = urlSearch.get('galleryId');
                const result = await axios({
                    url: '/gallery/review/del',
                    method: 'delete',
                    data: { gid },
                });
                console.log(result);
                if (result.data.errcode == -1) {
                    alert('삭제권한이 없습니다.');
                } else if (result.data.error == 'no error') {
                    alert('삭제완료');
                    location.href = '/gallery';
                }
            }
            //수정을 눌렀을 떄
            async function changeReview() {
                const urlSearch = new URLSearchParams(location.search);
                const gid = urlSearch.get('galleryId');
                const result = await axios({
                    url: '/gallery/review/editCheck',
                    method: 'post',
                    data: { gid },
                });
                console.log(result.data.reviewInfo);
                if (result.data.errcode == 0) {
                    localStorage.setItem('galleryItems', JSON.stringify(result.data.reviewInfo));
                    localStorage.setItem('userlocations', JSON.stringify(results));
                    location.href = '/gallery/reviewEdit?mode=1';
                } else {
                    alert('수정 권한이 없습니다!');
                }
            }

            async function addMainComment() {
                const urlSearch = new URLSearchParams(location.search);
                const mode = urlSearch.get('galleryId');
                const maincomment = document.forms['maincomment'].mainCommentInput.value;
                console.log(maincomment);
                const result = await axios({
                    url: '/gallery/review/addMainComment',
                    data: {
                        maincomment,
                        gid: mode,
                    },
                    method: 'POST',
                });
                if (result.data.errcode == -2) {
                    alert('로그인이 되어있지 않습니다!');
                }
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }

            async function deleteComment(main, sub, gid) {
                console.log('main :', main);
                console.log('sub :', sub);

                const result = await axios({
                    url: '/gallery/review/deleteComment',
                    data: {
                        main: main,
                        subid: sub,
                    },
                    method: 'POST',
                });
                console.log(result);
                if (result.data.errcode == -1) {
                    alert('삭제 권한이 없습니다!');
                }
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }
            async function addSubComment(i, gid, commentGroup, deepComment) {
                const urlSearch = new URLSearchParams(location.search);
                const mode = urlSearch.get('galleryId');
                let formString = 'maincomment' + i;
                const subcomment = document.forms[formString].mainCommentInput.value;
                const result = await axios({
                    url: '/gallery/review/addSubComment',
                    data: {
                        subcomment,
                        gid: mode,
                        commentGroup,
                        deepComment,
                    },
                    method: 'POST',
                });
                if (result.data.errcode == 0) {
                    location.reload();
                }
            }

            function showSubComment(idx) {
                const subcommentForm = document.querySelector(`.hideComment${idx}`);
                subcommentForm.style.display = 'block';
            }
            function toggleDropdown(event) {
                event.stopPropagation();
                const dropdownContent = event.target.nextElementSibling;
                dropdownContent.classList.toggle('show');
            }
            document.addEventListener('click', function (event) {
                const dropdowns = document.querySelectorAll('.dropdown-content');
                dropdowns.forEach(function (dropdown) {
                    if (!dropdown.classList.contains('show')) return;
                    dropdown.classList.remove('show');
                });
            });
            function showSubComment(idx) {
                const subcommentForm = document.querySelector(`.hideComment${idx}`);
                subcommentForm.style.display = 'block';
            }
        </script>
    </body>
</html>
