<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>STEP - 수정</title>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script
            type="text/javascript"
            src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=ijdya8hea0"
        ></script>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f4;
            }

            .main {
                text-align: center;
                margin-top: 50px;
                margin-bottom: 100px;
                background-color: #fff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                max-width: 600px;
                margin-left: auto;
                margin-right: auto;
            }

            .logo {
                max-width: 100%;
                height: auto;
                margin-bottom: 20px;
            }

            label {
                display: inline-block;
                width: 100px;
                text-align: right;
                margin-bottom: 5px;
            }

            input[type='text'] {
                width: calc(100% - 110px);
                padding: 10px;
                margin: 5px 0;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            /* 파일 업로드 버튼 스타일 */
            input[type='file'] {
                margin-top: 10px;
                padding: 10px;
                border: none;
                background-color: #333;
                color: #fff;
                border-radius: 5px;
                cursor: pointer;
            }

            input[type='file']:hover {
                background-color: #555;
            }

            button {
                padding: 10px 20px;
                background-color: #333;
                color: #fff;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
            }

            button:hover {
                background-color: #555;
            }
            .map {
                width: 700px;
                height: 350px;
                margin-top: 15px;
            }

            .map-container {
                display: flex;
                justify-content: center;
            }
        </style>
    </head>
    <body>
        <%-include('header.ejs')%>
        <br />
        <br />
        <br />
        <br />
        <section class="main">
            <!-- 로고 이미지 -->
            <img src="../headerLogo.png" style="height: 65px" alt="로고" class="logo" />
            <h2>지역 등록하기</h2>
            <form onsubmit="fileupload(event)" name="reviewEdit">
                <div>
                    <label for="title">제목:</label>
                    <input name="title" type="text" placeholder="제목" required />
                </div>
                <div>
                    <label for="mainText">본문:</label>
                    <input name="mainText" type="text" placeholder="본문" required />
                </div>
                <div>
                    <input type="radio" name="region" value="1" checked />경기/서울
                    <input type="radio" name="region" value="2" />강원
                    <input type="radio" name="region" value="3" />충청
                    <input type="radio" name="region" value="4" />경상
                    <input type="radio" name="region" value="5" />전라
                    <input type="radio" name="region" value="6" />제주
                </div>
                <div>
                    <label for="spotInfo">스팟정보:</label>
                    <input name="spotInfo" type="text" placeholder="스팟정보" required />
                </div>
                <div><input type="file" name="dynamic_files" multiple /></div>
                <!-- 지도 -->
                <div class="map-container">
                    <div class="map" id="map"></div>
                </div>
                <div style="margin-top: 20px">
                    <button>제출</button>
                    <button type="button" onclick="clearBtn()">클리어</button>
                </div>
            </form>
        </section>
        <hr />
        <%-include('footer.ejs')%>

        <script>
            //지도 로직

            //지도 초기 기준점 위치 설정
            const mapOptions = {
                center: new naver.maps.LatLng(36.626316, 127.936296),
                zoom: 6,
            };
            const userLocation = JSON.parse(localStorage.getItem('userlocations'));
            console.log(userLocation);
            const urlSearch = new URLSearchParams(location.search);
            const mode = urlSearch.get('mode') ? urlSearch.get('mode') : 0;

            var map = new naver.maps.Map('map', mapOptions);

            const markers = [];

            var polyline = new naver.maps.Polyline({
                map: map,
                path: [],
                strokeColor: '#5347AA',
                strokeWeight: 2,
            });

            naver.maps.Event.addListener(map, 'click', function (e) {
                var point = e.coord;
                var path = polyline.getPath();
                path.push(point);
                markers.push(
                    new naver.maps.Marker({
                        map: map,
                        position: point,
                    })
                );
            });
            const galleryInfos = JSON.parse(localStorage.getItem('galleryItems'));
            if (mode == 1) {
                const form = document.forms['reviewEdit'];

                console.log('infos', galleryInfos);
                form.title.value = galleryInfos.title;
                form.mainText.value = galleryInfos.mainText;
                form.region.value = galleryInfos.region;
                form.spotInfo.value = galleryInfos.spotInform;
            }
            function clearBtn() {
                for (let i = 0; i < markers.length; i++) {
                    console.log(markers[i].getPosition().lat());
                    markers[i].setMap(null);
                }
                markers.length = 0;
                polyline.setMap(null);
                polyline = new naver.maps.Polyline({
                    map: map,
                    path: [],
                    strokeColor: '#5347AA',
                    strokeWeight: 2,
                });
            }

            async function fileupload(event) {
                event.preventDefault();
                const form = document.forms['reviewEdit'];
                const title = form.title.value;
                const mainText = form.mainText.value;
                const region = form.region.value;
                const spotInfo = form.spotInfo.value;
                const files = form.dynamic_files.files;

                const formData2 = new FormData();
                //업데이트(mode ==1 이면 gid를 , 아니면 -1)
                const gid = mode == 1 ? galleryInfos.galleryid : -1;
                for (let i = 0; i < files.length; i++) {
                    formData2.append('gid', gid);
                    formData2.append('title', title);
                    formData2.append('mainText', mainText);
                    formData2.append('region', region);
                    formData2.append('spotInform', spotInfo);
                    formData2.append('array_file', files[i]);
                }
                let result1 = 0;
                //이미지들 url 만들기
                //업데이트시 파일은 수정안함
                if (files.length == 0 && mode == 1) {
                    console.log(galleryInfos.galleryid);
                    result1 = await axios({
                        url: '/gallery/uploadWithoutMulter',
                        method: 'POST',
                        data: {
                            galleryid: galleryInfos.galleryid,
                            title,
                            mainText,
                            region,
                            spotInfo,
                            mode,
                            thumnnail: '../static/ever2.jpeg',
                        },
                    });
                }

                //그림 파일도 수정
                else if (mode == 1) {
                    //reivew table 만들기
                    result1 = await axios({
                        url: '/gallery/singleAxios',
                        method: 'POST',
                        data: formData2,
                        Headers: {
                            'Content-Type': 'multipart/form-data',
                        },
                    });
                }
                //처음 작성인데 그림을 첨부하지 않았을 경우
                else if (files.length == 0) {
                    result1 = await axios({
                        url: '/gallery/uploadWithoutMulter',
                        method: 'POST',
                        data: {
                            title,
                            mainText,
                            region,
                            spotInfo,
                            mode,
                        },
                    });
                }
                //처음 작성에 그림 첨부
                else {
                    //reivew table 만들기
                    result1 = await axios({
                        url: '/gallery/singleAxios',
                        method: 'POST',
                        data: formData2,
                        Headers: {
                            'Content-Type': 'multipart/form-data',
                        },
                    });
                }

                const markerObject = [];
                for (let i = 0; i < markers.length; i++) {
                    markerObject.push({
                        lat: markers[i].getPosition().lat(),
                        lon: markers[i].getPosition().lng(),
                        order: i,
                        galleryid: result1.data.galleryid,
                    });
                }
                const result2 = await axios({
                    url: '/gallery/sendMapData',
                    method: 'POST',
                    data: { markerObject },
                });
                console.log(result2.data);

                location.href = '/gallery';

                // const result2= await axios({
                //     method : "POST",
                //     url: "gallery/multipleAxios",
                //     data : formData2
                // })
                // console.log("result2: ",result2)
            }
            function uploadWithoutMulter() {}
        </script>
    </body>
</html>
